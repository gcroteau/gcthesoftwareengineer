Title: Building an 8 Bit CPU from Scratch - Part III
Category: Personal Projects, Electronics
Tags: Hardware

# Building the ALU

We have two registers that can hold 8-bit of data each. Now we want to do operations on them. In our case, we want to be able to add and substract the two numbers stored in the registers. In this project, we won't be able to to boolean arithmetics with the ALU (e.g. do if/else conditions). Before we dive into putting the ALU together, it is crucial to understand how computers add and substract numbers.

## How do Computers add Numbers?

The concept upon which computers add numbers is exactly the same as when you add numbers manually on a sheet of paper in base 10. For example, when you do 11 + 9, you will have put a zero, have a carry of 1, add the carry to 1 and get 20. This is the same thing here for computers, just in base 2 instead of base 10. Here is a table that shows that.

| Carry in | A | B | Carry out | Sum |
|----------|---|---|-----------|-----|
|    n/a   | 0 | 0 |     0     |  0  |
|    n/a   | 0 | 1 |     0     |  1  |
|    n/a   | 1 | 0 |     0     |  1  |
|    n/a   | 1 | 1 |     1     |  0  |
|     1    | 0 | 0 |     0     |  1  |
|     1    | 0 | 1 |     1     |  0  |
|     1    | 1 | 0 |     1     |  0  |
|     1    | 1 | 1 |     1     |  1  |

In this table, we are adding the bit A to the bit B. We see the sum result, as well as the carry out. We show the result when we have a carry in as well (again, think of the 11 + 9 example in base 10).

Now, how do we transfer that logic on a breadboad? If you look closely, you'll notice that the first 4 lines look like a truth table for a XOR gate, and the other 4 are the exact oposite. One could build such adder using only XOR, AND, OR gates. However, in order to save some space, we will be using 2 4-bit adders chips.

## How do Computers Substract Numbers?

This is a bit more complicated. Ben goes into great details in his videos, therefore I highly sugest that you watch them, but here is the gist of it.

First, you can't use a bit to identify if a number is positive or negative. One problem is that 0000 represents 0 in base 10 and 1000 represents -0 in base 10. Meaning that we would have 2 states for 0. Here is another example of why it does not work:

- We are using 4-bits numbers
- 0101 = 5
- 1101 = -5
- 0101 + 1101 = 10010
- 0010 != 0 (it equals 2, which is flawed)

### Ones Complement

The first concept to introduce to represent negative numbers in binary is the ones complement. Here, we simply flip all the bits. For example, 1000 = -7, 0111 = 7. However, we still have 2 states for 0 (1111 = -0). Let's take our example above again.

- 0101 = 5
- 1010 = -5
- 0101 + 1010 = 1111 (-0, it works!)

Let's take another example.

- 0101 = 5
- 1100 = -3
- 0101 + 1100 = 10001
- 0001 != 2 (it equals 1, which is flawed)

As we can see, it is better than having a bit flag that indicates the negativity of a number, but it still has issues.

### Twos Complement

If you look closely at the second example above, you'll notice that the answer is off by one bit (0010 is the correct result). This is exactly what is the twos complement; we do the ones complement and then add 1. Let's take our 5 + -5 example again.

- 0101 = 5
- 1011 = -5
- 0101 + 1011 = 0000

As you can see, with the twos complement, we do not have 2 states to represent 0. Moreover, if you do the 5 + -3 example again, you'll see that the answer is not correct.

In other words, computers do not **exactly** substract numbers, they add negative numbers.

## Putting Everything Together

Now that we have the theory nailed down, let's see how we actually build this ALU. This part of the CPU will be on its own breadboad. It will be between the A register and the B register. The output of the two registers will be directely connected to the inputs of the ALU. The ALU itself is pretty simple. Instead of building it out of logic gates, we use 2 4-bit adders. Those adders do the sum of bits as we saw earlier. The carry out of one of the adder is connected to the carry in of the other, making it a 8-bit adder in total. With that, we can do the sum of register A and B.

In order to do substractions, we need to implements the twos complement in the ALU. For simplicity, our negative number can only be in the B register. Between the connections of the B registers to the ALU, we add a XOR chip. This does the ones complement. To do the twos complement, we add a connection to the carry in of the first adder chip. This connection is also shared through all the XOR gates. Meaning that this connection is now our substraction flag. When it is on, twos complement is applied to the B register, allowing us to do simple substractions.

Just like the registers, the ALU will always be outputing the result of the sum. This allows us to put LEDs to see the content of the ALU. Because of that, we do not want to connect the output of the ALU directly to the bus. We want to control when we push the sum's result to the bus. This is why we add a simple tri-state chip between the output of the ALU and the bus. Only when the tri-state is enable then the result of the sum will be pushed to the bus.

The clock is connected on the 2 registers and the ALU. On a clock tick, the registers will either: load data from the bus, push to the bus, or do nothing. The ALU will do the sum of the 2 registers on each clock tick, and will output the result if that flag is enabled.

## How it Looks so Far 

Here is a global overview of how it looks now.

[TODO IMAGE]

You'll notice that we have connected the power between the boards, but also that we removed the power strips from the ALU breadboard. This not only to gain some space. We will gather power strips during the project so that we can build the bus with them later.

# Up Next ...




[x] We will be able to add and substract. We wont be able to do logic calculation (boolean arithmetic)
[x] How do computers add numbers?
[x] How do computers substract numbers?
    [x] How to represent negative numbers? (then add)
[x] ALU between A and B, will always output the sum
[x] Has a flag for substraction
[x] For simplicity on the board, we use 2 4-bit adders, with the carry out of one connected to the carry in of the other (8 bit adder total)
[x] Same tri-state logic as the registers, since the output of the ALU will always be on (LEDs) for debugging
    [x] Flag sum out to enable pushing to the bus
[x] We use XOR gates to do the inversion of the B reg when we want to substract (and a sub flag for the ones complement)
[x] Building it: put the ALU in between A and B and connect the power between the boards
    [x] Stripped the power from the ALU board to gain some space, plus we will use those strips to build the bus latter on
    [x] We connect the clock to all the modules (ALU will compute on every tick)
[x] Image
[ ] Conclusion and next steps

TODO: make sure that the verb tenses are correct in both articles

[ ] image of register A connected to the ALU
[ ] image of removing the powerstrips
[ ] image of a sum of A + B
[ ] image of register and bus (first article)
[ ] changes to make it 2 posts