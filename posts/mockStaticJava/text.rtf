{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww20720\viewh10280\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\b\fs24 \cf0 How to Mock a Static Method in Java
\b0 \
\
As you know, at the time of writing, mainstream java mock libraries such as Mockito or EasyMock cannot mock static methods, final classes, constructors, etc. These limitations sometime force us to put aside good design for test implementation. Fortunately, there is a library called PowerMock that leverages the Mockito or EasyMock libraries. It allows us to do some very useful things, such as mocking a static method.\
\
Please note that, since developers have much more liberty using PowerMock, putting it in the hands of inexperienced ones can be harmful for the design.\
\
So, lets see how we can mock a static method using JUnit, Mockito and PowerMock.\
\
Lets say that we have a deck of cards and we want to implement a method that shuffles the deck. Pretty simple right? We just have to call Collections.shuffle on the List that contains the cards.\
\
[code language=\'93java\'94]\
public class Deck \{\
	private List<Card> cards;\
\
	//\'85 Class implementation \'85\
\
	public void shuffle() \{\
		Collections.shuffle(this.cards);\
	\}\
\}\
[/code]\
\
How do we test that? (For the purpose of explanation, I think it is easier to understand if I show you first the production code. That being said I highly recommend you to practice TDD IRL :) )\
\
If we could mock static methods with Mockito, we would have something like this:\
\
[code language=\'93java\'94]\
public class DeckTest \{\
	@Test\
	public void givenADeckOfCards_whenTheDeckIsShuffelled_thenTheCardsAreShuffelled() \{\
		// given\
		Deck aDeck = new Deck();\
\
		// when\
		aDeck.shuffle();\
\
		// then\
		Mockito.verify(Collections).shuffle(anyListOf(Card.class)); // Doesn\'92t work :(\
	\}\
\}\
[/code]\
\
Lets see how we can do this with PowerMock.\
\
First you need to tell JUnit to run PowerMock\'92s runner instead of the one built into JUnit.\
\
Second, you need to prepare the class that uses the static method calls. Therefore, if we were testing a class that implements a static method, we would write its class definition here. In our case, we test a class that uses a static method that comes from another class. For this reason we must specify the class that uses the static method. (Hopefully this will save you some troubles, I lost too much time on that detail ..).\
\
After that, you are ready to write your test: mock the class that has the static method, verify that it has been called and tell PowerMock the expected method call.\
\
[code language=\'93java\'94]\
@RunWith(PowerMockRunner.class) // Use PowerMock\'92s runner\
@PrepareForTest(\{Deck.class\}) // Prepare the class that calls a static method\
public class DeckTest \{\
	@Test\
	public void givenADeckOfCards_whenTheDeckIsShuffelled_thenTheCardsAreShuffelled() \{\
		// given\
		Deck aDeck = new Deck();\
\
		// when\
		PowerMockito.mockStatic(Collections.class);\
		aDeck.shuffle();\
\
		// then\
		PowerMockito.verifyStatic(Mockito.times(1)); // You can omit Mockito.times(1) when you expect only one call\
		Collections.shuffle(anyListOf(Card.class)); // The expected method call\
	\}\
\}\
[/code]\
\
There you go. I\'92ll leave you with PowerMock's Github link: https://github.com/jayway/powermock. You will find there all the documentation on the framework. You will find that it is a quite powerful tool.}