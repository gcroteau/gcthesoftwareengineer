{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww15960\viewh9100\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\b\fs24 \cf0 How to abort an HTTP call using AngularJS
\b0 \
\
So, you use the $http service in order to do HTTP requests. But for some reason, you want to be able to cancel some of those requests. For example, you have an HTTP call that takes some time to complete, therefore you offer the user to cancel the request. It turns out that it is not as easy as with jQuery, but it is not rocket science either. So let\'92s take a look at how we can do that.\
\
First, you must know that you can pass a config argument to the method call. For example:\
\
[code language="javascript\'94]\
\
$http.get(url, config); // config is optional\
$http.post(url, config); // config is optional\
$http(config); // config is mandatory\
\
[/code]\
\
In this config object, you can specify a timeout attribute. This is the attribute that we are going to use in order to cancel the HTTP request. This attribute can take either a number or a promise.\
\
The number represent a timeout in milliseconds. If the query is not completed when the specified timeout expire, then the query is aborted.\
\
This can be useful, but we want to be able to abort the HTTP call when a specific condition is met, so how do we do that? We need a deferred object. To put it simply, a deferred object represents a task that will finish later during the life time of your web app. We use this deferred object to create a promise. That promise will be set to the timeout attribute of our config object. If the promise resolves, then the HTTP call is aborted.\
\
So, enough theory, here is a simple example:\
\
[code language="javascript\'94]\
\
var canceller = $q.defer();\
\
var config = \{timeout: canceller\};\
\
$http.post(url, config);\
\
// Somewhere else in the code, for example when the user cancels the operation\
\
canceller.resolve(\'93User cancelled the operation\'94); // HTTP call aborted\
\
[/code]\
\
If, for example, your canceller object is an attribute of some custom service, you will have to reinitialize it to a new deferred object each time a query is aborted.\
\
This should give you a good starting point, I am sure it will not be hard for you to come up with something more complex or more sustainable.\
\
Happy coding!}